{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"ESGF-QC","text":"<p>Quality-control Framework  for WCRP projects, built on top of the IOOS Compliance Checker.</p>"},{"location":"#what-is-it","title":"What is it?","text":"<p>ESGF-QC runs a set of plugins on NetCDF files to ensure they follow projects and conventions (WCRP/CMIP/Cf/Copernicus...) rules (DRS paths, attributes, data, etc.).  </p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>Config-driven: TOML files decide which checks to run and how strict they are  </li> <li>Modular checks: dimensions,attributes, variables, time, attributes, DRS and consistency, etc.  </li> <li>Multiple outputs: text (CLI), HTML reports, Json/Json_new  </li> <li>Extendable: easy to add new checks or whole project suites</li> </ul>"},{"location":"cf_feature_parity_matrix/","title":"CF Feature Parity Matrix","text":"<p>This document is intended to show where the IOOS Compliance Checker supports CF features as outlined by the conformance lists and conventions documents. Most CF features are supported, but several are either partially implemented or are not presently implemented, as denoted by the table below.</p> Section Implemented Notes GitHub Tracking Issue 2.1. Filename yes 2.2. Data Types yes 2.3. Naming Conventions yes 2.4. Dimensions yes 2.5. Variables yes 2.5.1. Missing data, valid and actual range of data yes 2.6. Attributes yes 2.6.1. Identification of Conventions yes 2.6.2. Description of file contents yes 2.6.3. External Variables yes 2.7. Groups no Handling code exists, not implemented on checker level.  Requires significant code changes to code that references other variables or attributes. https://github.com/ioos/compliance-checker/issues/945 2.7.1. Scope \" 2.7.2. Application of attributes \" 3. Description of the Data yes 3.1. Units yes 3.2. Long Name yes 3.3. Standard Name yes 3.4. Ancillary Data yes 3.5. Flags yes 4. Coordinate Types yes 4.1. Latitude Coordinate yes 4.2. Longitude Coordinate yes 4.3. Vertical (Height or Depth) Coordinate yes 4.3.1. Dimensional Vertical Coordinate yes 4.3.2. Dimensionless Vertical Coordinate yes 4.3.3. Parametric Vertical Coordinate yes 4.4. Time Coordinate yes 4.4.1. Calendar yes 4.5. Discrete Axis yes 5. Coordinate Systems and Domain partial Needs ragged and indexed array support https://github.com/ioos/compliance-checker/issues/949 5.1. Independent Latitude, Longitude, Vertical, and Time Axes yes 5.2. Two-Dimensional Latitude, Longitude, Coordinate Variables yes 5.3. Reduced Horizontal Grid yes 5.4. Timeseries of Station Data yes 5.5. Trajectories yes 5.6. Horizontal Coordinate Reference Systems, Grid Mappings, and Projections partial Needs implementation of a few more sections https://github.com/ioos/compliance-checker/issues/950 5.6.1. Use of the CRS Well-known Text Format yes 5.7. Scalar Coordinate Variables yes 5.8. Domain Variables yes 6. Labels and Alternative Coordinates yes 6.1. Labels yes 6.1.1. Geographic Regions partial Implicit from handling of standard names - does not check region names 6.1.2. Taxon Names and Identifiers yes 6.2. Alternative Coordinates no? 7. Data Representative of Cells yes 7.1. Cell Boundaries yes 7.2. Cell Measures yes 7.3. Cell Methods yes 7.3.1. Statistics for more than one axis yes 7.3.2. Recording the spacing of the original data and other information yes 7.3.3. Statistics applying to portions of cells yes 7.3.4. Cell methods when there are no coordinates ? 7.4. Climatological Statistics yes 7.5. Geometries partial Various portions of the geometry section need to be implemented to bring in line with conformance doc. See issue. https://github.com/ioos/compliance-checker/issues/955 8. Reduction of Dataset Size yes 8.1. Packed Data partial 8.2. Lossless Compression by Gathering yes 8.3. Lossy Compression by Coordinate Subsampling no Section requires considerable work to implement and not many files have been found with this interpolation. Presently not implemented even in development branches. https://github.com/ioos/compliance-checker/issues/957 8.3.1. Tie Points and Interpolation Subareas \" 8.3.2. Coordinate Interpolation Attribute \" 8.3.3. Interpolation Variable \" 8.3.4. Subsampled, Interpolated and Non-Interpolated Dimensions \" 8.3.5. Tie Point Mapping Attribute \" 8.3.6. Tie Point Dimension Mapping \" 8.3.7. Tie Point Index Mapping \" 8.3.8. Interpolation Parameters \" 8.3.9. Interpolation of Cell Boundaries \" 8.3.10. Interpolation Method Implementation \" 9. Discrete Sampling Geometries yes 9.1. Features and feature types yes 9.2. Collections, instances and elements yes 9.3. Representations of collections of features in data variables yes 9.3.1. Orthogonal multidimensional array representation yes 9.3.2.  Incomplete multidimensional array representation yes 9.3.3.  Contiguous ragged array representation yes 9.3.4. Indexed ragged array representation yes 9.4. The featureType  attribute yes 9.5. Coordinates and metadata yes 9.6. Missing Data ?"},{"location":"cf_plugin/","title":"CF Plugin (IOOS Compliance Checker)","text":"<p>The IOOS Compliance Checker ships with a native CF (Climate &amp; Forecast) metadata plugin. Many of those CF checks are directly relevant to WCRP projects (CMIP, CORDEX, \u2026). To avoid redundancy, we did not duplicate these validations inside ESGF-QC.</p>"},{"location":"cf_plugin/#where-to-find-detailed-cf-checks","title":"Where to find detailed CF checks","text":"<ul> <li> <p>Official IOOS Compliance Checker documentation (complete list and descriptions):   https://ioos.github.io/compliance-checker/</p> </li> <li> <p>Our internal summary spreadsheet : Checks_QC_Table</p> </li> </ul> <p>You can alse see the CF Convention website : https://cfconventions.org/</p>"},{"location":"checks/","title":"Checks Overview","text":"<p>ESGF-QC is built from many atomic checks, grouped by category. The plugin just decides which ones to run; each category focuses on a specific aspect of file quality.</p>"},{"location":"checks/#dimension-checks","title":"Dimension Checks","text":"<p>Verify that required dimensions exist, have a positive/expected size, and match the declared shapes of variables.</p>"},{"location":"checks/#variable-checks","title":"Variable Checks","text":"<p>Ensure variables are present, their shape matches their dimensions, and (when bounds are declared) each value lies within its bounds.</p>"},{"location":"checks/#time-checks","title":"Time Checks","text":"<p>Focus on the <code>time</code> axis: presence of bounds with the right shape, and consistency between the time axis and the filename\u2019s time range.</p>"},{"location":"checks/#attribute-checks","title":"Attribute Checks","text":"<p>Check that mandatory global and variable attributes are there, correctly typed/encoded, and their values are valid against regex patterns or controlled vocabularies.</p>"},{"location":"checks/#drs-consistency-checks","title":"DRS &amp; Consistency Checks","text":"<p>Validate filenames and directory paths and compare with the netcdf file's attributes; verify consistency between attributes like frequency vs table_id, <code>experiment_id</code>, <code>institution</code>, <code>variant_label</code>, etc., against project rules/CVs.</p>"},{"location":"checks/#coming-next","title":"Coming Next","text":"<ul> <li>Data plausibility checks (e.g. physical plausible, statisctically meaningful, ...).</li> <li>Dataset-level checks across multiple files (time continuity, no gaps/overlaps, consistent metadata ).</li> </ul>"},{"location":"checks/#detailed-inventory","title":"Detailed Inventory","text":"<p>For the full list of checks (IDs, severities), see the spreadsheet :</p> <p>\ud83d\udd17Checks_QC_Table</p>"},{"location":"credits/","title":"Credit","text":"Acknowledgements <p>     We gratefully acknowledge the support of the Copernicus Climate Change Service - 382     and the PEPR TRACCS \u2013 PC2 project. </p> <p> </p>"},{"location":"installation/","title":"Overview &amp; Installation","text":""},{"location":"installation/#scientific-context","title":"Scientific Context","text":"<p>WCRP projects (e.g. CMIP6) generate large volumes of NetCDF files. ESGF-QC provides conformity checks to verify that these files follow the specifications (DRS, mandatory attributes, temporal consistency, etc.).</p>"},{"location":"installation/#architecture-in-a-nutshell","title":"Architecture in a Nutshell","text":"<ul> <li>Base framework: IOOS Compliance Checker</li> <li>Extensions: <code>compliance_checker/checks/</code> contains atomic checks grouped by theme</li> <li>WCRP/Project plugin: <code>compliance_checker/wcrp/wcrp_cmip6.py</code> + TOML configuration</li> </ul>"},{"location":"installation/#requirements","title":"Requirements","text":"<ul> <li>Python \u2265 3.10</li> <li>Standard scientific stack (installed automatically): <code>netCDF4</code>, <code>xarray</code>, etc.</li> </ul>"},{"location":"installation/#installation","title":"Installation","text":"<p>Install ESGF-QC from the Git repository</p> <pre><code>pip install git+[https://github.com/ESGF/esgf-qc.git@main]\n</code></pre> <p>And then install Esgvoc and Universe to get the Controlled Vocabulary (Mandatory)</p> <pre><code>esgvoc config set universe:branch=esgvoc_dev\nesgvoc install\n</code></pre> <p>\ud83d\udca1 Note: If you encounter a <code>[Errno 2] No such file or directory</code> error related to a missing file like <code>sfcwind.json</code> after running <code>esgvoc install</code>, simply run the same <code>esgvoc install</code> command again. This issue is usually resolved on the second attempt as it may result from a temporary initialization glitch.</p>"},{"location":"installation/#verify-the-installation","title":"Verify the installation:","text":"<p>For esgqc :</p> <pre><code>esgqc --version\n# or\npython cchecker.py --version\n</code></pre> <p>For esgvoc :</p> <pre><code>esgvoc --help\n# or\npip show esgvoc\n</code></pre>"},{"location":"reporting/","title":"Reporting","text":"<p>This page explains what you get in each output format</p>"},{"location":"reporting/#1-text-format-f-text","title":"1. Text format (<code>-f text</code>)","text":"<ul> <li>Shows only problems by default. Passed checks are hidden.</li> <li>Ends with a short summary (e.g. <code>file.nc has X issues</code>).</li> </ul> <p>Example snippet (terminal):</p> <p> </p>"},{"location":"reporting/#2-json-formats-f-json-f-json_new","title":"2. JSON formats (<code>-f json</code>, <code>-f json_new</code>)","text":"<p>Contains every check (PASS or FAIL) with its details and adds two global counters:</p> <ul> <li><code>scored_points</code> = \u03a3(passed_assertions \u00d7 weight)</li> <li><code>possible_points</code> = \u03a3(total_assertions \u00d7 weight)<ul> <li>Weights: High = 3, Medium = 2, Low = 1.</li> </ul> </li> </ul> <p>Severity lists:</p> <ul> <li><code>high_priorities</code>, <code>medium_priorities</code>, <code>low_priorities</code> \u2192 only the severities active for the chosen criteria.</li> <li><code>all_priorities</code> \u2192 shows all priorities related to the chosen criteria.</li> </ul> <p>Criteria effect (-c):</p> <ul> <li><code>strict</code>: High + Medium + Low count in the decision.</li> <li><code>normal</code> (default): High + Medium count.</li> <li><code>lenient</code>: High only counts.</li> </ul> <p>Example snippet (terminal):</p> <p> </p>"},{"location":"usage/","title":"Usage","text":""},{"location":"usage/#running-the-esgf-qc","title":"\ud83d\ude80 Running the ESGF-QC","text":"<p>To run the ESGF-QC , use the following command:</p> <pre><code>esgqc --test=''check''  ''filepath'' \n</code></pre> <p>Example for WCRP CMIP6 plugin : </p> <pre><code>esgqc  --test=wcrp_cmip6:1.0  path/to/data/CMIP6/CMIP/IPSL/IPSL-CM5A2-INCA/historical/r1i1p1f1/Amon/pr/gr/v20240619/pr_Amon_IPSL-CM5A2-INCA_historical_r1i1p1f1_gr_185001-201412.nc\n</code></pre> <ul> <li>If you don\u2019t pass -f, the default output is text.</li> <li>Output Formats : text ( default) / html / json (single input file only) / json_new (handles multiple files).</li> </ul> <p>\u26a0\ufe0f CF plugin: Always run the CF checks as well when running the WCRP project checks, to ensure that CF-only checks (not duplicated in WCRP projects) are also verified.</p>"},{"location":"usage/#run-several-checks","title":"Run several checks","text":"<pre><code>esgqc   --test=cf:1.11 --test=wcrp_cmip6:1.0 path/to/data/CMIP6/CMIP/IPSL/IPSL-CM5A2-INCA/historical/r1i1p1f1/Amon/pr/gr/v20240619/pr_Amon_IPSL-CM5A2-INCA_historical_r1i1p1f1_gr_185001-201412.nc\n</code></pre>"},{"location":"usage/#save-output-to-a-file","title":"Save output to a file","text":"<pre><code>esgqc --test=wcrp_cmip6:1.0 file.nc -f text(json/html) -o qc.txt(json/html)   \n</code></pre>"},{"location":"usage/#skip-include-specific-wcrp_project-checks","title":"Skip / Include Specific WCRP_Project Checks","text":"<ul> <li>Only use check names from the wcrp_project (wcrp_cmip6 for example) suite here.</li> </ul> <p>To skip checks :</p> <pre><code># Here we skip check_Global_Variable_Attributes from WCRP CMIP6 Plugin for example\nesgqc --test=wcrp_cmip6:1.0 file.nc -s  check_Global_Variable_Attributes\n</code></pre> <p>To include checks ( we do only checks belonging to this specific checks)</p> <pre><code># Here we do only check_Drs_Vocabulary from WCRP CMIP6 Plugin for example\nesgqc --test=wcrp_cmip6:1.0 wcrp_cmip6:1.0 file.nc -i check_Drs_Vocabulary\n</code></pre> <p>To list all available checks</p> <pre><code>esgqc -l \n</code></pre>"},{"location":"usage/#multiple-files","title":"Multiple files","text":"<ul> <li>Use shell wildcards/globs, and use json_new if you want one detailed JSON for all files:</li> </ul> <pre><code># Here we skip check_Global_Variable_Attributes from WCRP CMIP6 Plugin for example\nesgqc -t wcrp_cmip6 /data/CMIP6/**/*.nc -f json_new \n</code></pre>"},{"location":"wcrp_cmip6_plugin/","title":"The <code>WCRP Project</code> Plugin","text":"<p>The WCRP plugin rely on the wcrp_project.py file, which acts as the \u201cconductor\u201d for WCRP projects (CMIP6 for Beta release, CMIP7, CORDEX, etc. soon)  that calls all the small atomic checks and decides which ones to run, with which severity.</p>"},{"location":"wcrp_cmip6_plugin/#what-it-does","title":"What it does","text":"<ul> <li>Loads a configuration file (<code>wcrp_config.toml</code>) that lists:</li> <li>Which checks to run (DRS, attributes, variables, time, etc.)</li> <li>The severity/priority of each check (High ''Mandatory''/ Medium ''Optional'' /Low ''Warning'' )</li> <li>Runs the atomic checks implemented in <code>compliance_checker/checks/\u2026</code></li> <li>Example: dimension existence/size, variable shape, time bounds, filename/DRS consistency, etc.</li> <li>Aggregates results and returns them to the Compliance Checker core, which formats them (text, html, json\u2026).</li> </ul>"},{"location":"wcrp_cmip6_plugin/#toml-configuration-files","title":"TOML configuration files","text":"<ul> <li> <p><code>wcrp_config.toml</code>   Tells the plugin what to verify and how strict to be. It\u2019s essentially a checklist with severities.</p> </li> <li> <p><code>mapping_variables.toml</code>   Temporary helper that maps <code>&lt;table_id&gt;.&lt;variable_id&gt;</code> to an intermediate \u201cuniverse\u201d/registry name so we can grab expected info (dimensions, cell_methods, etc.). This is a stop\u2011gap until the necessary information is fully exposed in the ESGVOC vocabulary.</p> </li> </ul>"},{"location":"wcrp_cmip6_plugin/#key-takeaway","title":"Key takeaway","text":"<ul> <li>The plugin itself doesn\u2019t \u201cdo\u201d heavy validation logic\u2014it orchestrates the atomic checks using a config-driven approach.</li> <li>The variable mapping to the \u201cuniverse\u201d is temporary; the goal is to rely directly on ESGVOC vocabularies in the near future.</li> </ul>"},{"location":"source/development/","title":"Developer Notes","text":""},{"location":"source/development/#pytest","title":"pytest","text":"<p>When running the python test suite, there may be test errors.  Certain tests <code>record</code> responses to remote queries for information.  If tests fail, they will appear to continue to fail as the queries are cached.</p> <p>To perform tests using fresh queries from remote services, use <code>pytest --disable-vcr</code>.  In certain cases, clearing the cache is also advised, use <code>pytest --clear-cache</code>.</p>"},{"location":"source/faq/","title":"Frequently Asked Questions","text":""},{"location":"source/faq/#what-is-the-compliance-checker","title":"What is the Compliance Checker?","text":"<p>The IOOS Compliance Checker is a Python-based tool for data providers to check for completeness and community standard compliance of local or remote netCDF files against CF and ACDD file standards. The Python module can be used as a command-line tool or as a library that can be integrated into other software.</p> <p>You are currently viewing the web-based version of the Compliance Checker. It was developed to enable a broader audience and improve accessibility for the checker. With the web version, providers can simply provide a link or upload their datasets and get the full suite of capabilities that Compliance Checker offers.</p>"},{"location":"source/faq/#what-does-the-compliance-checker-check","title":"What does the Compliance Checker check?","text":"<p>It currently supports the following sources and standards: - ACDD (1.1, 1.3) - CF (1.6, 1.7) - IOOS (1.1, 1.2) - Glider DAC - NCEI (1.1, 2.0)</p>"},{"location":"source/faq/#can-i-test-an-erddap-dataset-with-the-compliance-checker","title":"Can I test an ERDDAP dataset with the Compliance Checker?","text":"<p>Yes. When testing an ERDDAP dataset, please supply the URL to the dataset without a file extension. For example, to test this Morro Bay dataset, you should supply the URL like so: \"https://standards.sensors.ioos.us/erddap/tabledap/morro-bay-bs1-met\".</p>"},{"location":"source/faq/#what-version-of-the-compliance-checker-is-run-on-complianceioosus","title":"What version of the Compliance Checker is run on compliance.ioos.us?","text":"<p>This web site is using version 5.0.0 of the Compliance Checker.</p>"},{"location":"source/faq/#is-there-an-api","title":"Is there an API?","text":"<p>There sure is. Check out the details on how to use the web API here.</p>"},{"location":"source/faq/#where-can-i-find-more-information-about-the-compliance-checker","title":"Where can I find more information about the Compliance Checker?","text":"<p>The Compliance Checker is completely open-source and available on GitHub.</p>"},{"location":"source/faq/#disclaimer","title":"Disclaimer","text":"<p>The objective of the IOOS Compliance Checker is to check your file against our interpretation of select dataset metadata standards to use as a guideline in generating compliant files.  The compliance checker should not be considered the authoritative source on whether your file is 100% \"compliant\". Instead, we recommend that users use the results as a guide to work towards compliance.</p>"},{"location":"source/readme_link/","title":"Readme link","text":"<p><code>{include} ../../README.md</code></p>"}]}